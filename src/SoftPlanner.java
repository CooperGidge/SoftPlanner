/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

// Imports
import java.io.*;
import javax.swing.*;

/**
 * Main class for the SoftPlanner program. Most logic is done here.
 * @author cogid4775
 */
public class SoftPlanner extends javax.swing.JFrame {

    /**
     * Creates new form SoftPlanner
     */
    public SoftPlanner() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        load = new javax.swing.JButton();
        todoNext = new javax.swing.JButton();
        todoPrev = new javax.swing.JButton();
        todoLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        todo2Title = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        todo1Title = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        todo3Title = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        doing3Title = new javax.swing.JTextArea();
        doingNext = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        doing2Title = new javax.swing.JTextArea();
        doingPrev = new javax.swing.JButton();
        doingLabel = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        doing1Title = new javax.swing.JTextArea();
        doneLabel = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        done2Title = new javax.swing.JTextArea();
        doneNext = new javax.swing.JButton();
        donePrev = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        done3Title = new javax.swing.JTextArea();
        jScrollPane9 = new javax.swing.JScrollPane();
        done1Title = new javax.swing.JTextArea();
        add = new javax.swing.JButton();
        edit = new javax.swing.JButton();
        remove = new javax.swing.JButton();
        move = new javax.swing.JButton();
        todo1ID = new javax.swing.JLabel();
        doing1ID = new javax.swing.JLabel();
        done1ID = new javax.swing.JLabel();
        todo2ID = new javax.swing.JLabel();
        doing2ID = new javax.swing.JLabel();
        done2ID = new javax.swing.JLabel();
        todo3ID = new javax.swing.JLabel();
        doing3ID = new javax.swing.JLabel();
        done3ID = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SoftPlanner");

        load.setText("Load Items");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });

        todoNext.setText("Next");
        todoNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                todoNextActionPerformed(evt);
            }
        });

        todoPrev.setText("Previous");
        todoPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                todoPrevActionPerformed(evt);
            }
        });

        todoLabel.setText("TO DO");
        todoLabel.setToolTipText("");

        jLabel4.setText("OPTIONS");
        jLabel4.setToolTipText("");

        todo2Title.setEditable(false);
        todo2Title.setColumns(20);
        todo2Title.setLineWrap(true);
        todo2Title.setRows(5);
        todo2Title.setText(" ");
        jScrollPane1.setViewportView(todo2Title);

        todo1Title.setEditable(false);
        todo1Title.setColumns(20);
        todo1Title.setLineWrap(true);
        todo1Title.setRows(5);
        todo1Title.setText(" ");
        jScrollPane2.setViewportView(todo1Title);

        todo3Title.setEditable(false);
        todo3Title.setColumns(20);
        todo3Title.setLineWrap(true);
        todo3Title.setRows(5);
        todo3Title.setText(" ");
        jScrollPane3.setViewportView(todo3Title);

        doing3Title.setEditable(false);
        doing3Title.setColumns(20);
        doing3Title.setLineWrap(true);
        doing3Title.setRows(5);
        doing3Title.setText(" ");
        jScrollPane4.setViewportView(doing3Title);

        doingNext.setText("Next");
        doingNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doingNextActionPerformed(evt);
            }
        });

        doing2Title.setEditable(false);
        doing2Title.setColumns(20);
        doing2Title.setLineWrap(true);
        doing2Title.setRows(5);
        doing2Title.setText(" ");
        jScrollPane5.setViewportView(doing2Title);

        doingPrev.setText("Previous");
        doingPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doingPrevActionPerformed(evt);
            }
        });

        doingLabel.setText("DOING");
        doingLabel.setToolTipText("");

        doing1Title.setEditable(false);
        doing1Title.setColumns(20);
        doing1Title.setLineWrap(true);
        doing1Title.setRows(5);
        doing1Title.setText(" ");
        jScrollPane6.setViewportView(doing1Title);

        doneLabel.setText("DONE");
        doneLabel.setToolTipText("");

        done2Title.setEditable(false);
        done2Title.setColumns(20);
        done2Title.setLineWrap(true);
        done2Title.setRows(5);
        done2Title.setText(" ");
        jScrollPane7.setViewportView(done2Title);

        doneNext.setText("Next");
        doneNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneNextActionPerformed(evt);
            }
        });

        donePrev.setText("Previous");
        donePrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                donePrevActionPerformed(evt);
            }
        });

        done3Title.setEditable(false);
        done3Title.setColumns(20);
        done3Title.setLineWrap(true);
        done3Title.setRows(5);
        done3Title.setText(" ");
        jScrollPane8.setViewportView(done3Title);

        done1Title.setEditable(false);
        done1Title.setColumns(20);
        done1Title.setLineWrap(true);
        done1Title.setRows(5);
        done1Title.setText(" ");
        jScrollPane9.setViewportView(done1Title);

        add.setText("Add Item");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        edit.setText("Edit Item");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        remove.setText("Delete Item");
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        move.setText("Move Item");
        move.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveActionPerformed(evt);
            }
        });

        todo1ID.setText("(------)");
        todo1ID.setToolTipText("");

        doing1ID.setText("(------)");
        doing1ID.setToolTipText("");

        done1ID.setText("(------)");
        done1ID.setToolTipText("");

        todo2ID.setText("(------)");
        todo2ID.setToolTipText("");

        doing2ID.setText("(------)");
        doing2ID.setToolTipText("");

        done2ID.setText("(------)");
        done2ID.setToolTipText("");

        todo3ID.setText("(------)");
        todo3ID.setToolTipText("");

        doing3ID.setText("(------)");
        doing3ID.setToolTipText("");

        done3ID.setText("(------)");
        done3ID.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(todo2ID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(todoNext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(todoLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(todoPrev, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(todo1ID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(doingNext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(doingPrev, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(doing1ID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(doing2ID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(doingLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(todo3ID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(doing3ID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(doneNext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(donePrev, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(done1ID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(done2ID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(doneLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(load, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(remove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(move, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(done3ID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(doneLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(donePrev)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(done1ID))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(todoLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(todoPrev)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(doingLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(doingPrev)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(todo1ID)
                            .addComponent(doing1ID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(todo2ID)
                            .addComponent(doing2ID)
                            .addComponent(done2ID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(todo3ID)
                            .addComponent(doing3ID)
                            .addComponent(done3ID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(todoNext)
                            .addComponent(doingNext)
                            .addComponent(doneNext)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(load)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(edit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(remove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(move)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
     * Display the lists
     * Code solely to display the lists
     * Code to edit the lists is below,
     * Code to save the lists is below
     */
    
    // Used when a field is blank
    private final String blank = " ";
    
    // Indexes for the to do list pagination
    private final Index todoIndex1 = new Index(0);
    private final Index todoIndex2 = new Index(1);
    private final Index todoIndex3 = new Index(2);
    
    // Indexes for the doing list pagination
    private final Index doingIndex1 = new Index(0);
    private final Index doingIndex2 = new Index(1);
    private final Index doingIndex3 = new Index(2);
    
    // Indexes for the done list pagination
    private final Index doneIndex1 = new Index(0);
    private final Index doneIndex2 = new Index(1);
    private final Index doneIndex3 = new Index(2);
    
    /**
     * Sets the text of the pagination text areas
     * @param l the text area to set the text of
     * @param i the index of the item to set the text area to
     * @param id the label associated with the text area
     * @param list the list that has the item to set the text area to
     */
    private void setTextLoad(javax.swing.JTextArea l, Index i, javax.swing.JLabel id, List list) {
        // If the list item provided doesn't exist, it will return null
        // So if null is returned, then use the "else" condition and set
        // the text area and label to blank values.
        if (list.getItem(i.value()) != null) {
            // If the item exists...
            // ...set the text area to its value
           l.setText(list.getItem(i.value()));
           // ...and set the label to the item's index
           id.setText("ID: " + i.value());
        } else {
            l.setText(blank);
            id.setText("(------)");
        }
    }
    
    /**
     * Changes the page of the paginated list
     * @param i1 index of the first paginated item
     * @param i2 index of the second paginated item
     * @param i3 index of the third paginated item
     * @param isNext true to move to the next page, false to move to the previous
     * @param list the list to change the page of
     */
    private void changePage(Index i1, Index i2, Index i3, boolean isNext, List list) {
        // If moving to the previous page
        if (!isNext) {
            // Check if the previous page exists
            if (i1.value() > 0) {
                // If it exists, subtract 3 from the indexes to move to the previous page
                i1.subtractThree();
                i2.subtractThree();
                i3.subtractThree();
                // Load the new data
                load.doClick();
            } else {
                // If the previous page does not exist, display this error
                JOptionPane.showMessageDialog(null, "You are already at the start of the list.");
            }
        // If moving to the next page
        } else {
            // check if the next page exists
            if (i3.value() < (list.getSize()-1)) {
                // If it exists, add 3 to the indexes to move to the next page
                i1.addThree();
                i2.addThree();
                i3.addThree();
                // Load the new data
                load.doClick();
            } else {
                // If the next page does not exist, display this error
                JOptionPane.showMessageDialog(null, "You are already at the end of the list.");
            }
        }
    }
    
    /**
     * Load the index data using the setTextLoad method
     */
    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        setTextLoad(todo1Title, todoIndex1, todo1ID, li);
        setTextLoad(todo2Title, todoIndex2, todo2ID, li);
        setTextLoad(todo3Title, todoIndex3, todo3ID, li);
        
        setTextLoad(doing1Title, doingIndex1, doing1ID, li2);
        setTextLoad(doing2Title, doingIndex2, doing2ID, li2);
        setTextLoad(doing3Title, doingIndex3, doing3ID, li2);
        
        setTextLoad(done1Title, doneIndex1, done1ID, li3);
        setTextLoad(done2Title, doneIndex2, done2ID, li3);
        setTextLoad(done3Title, doneIndex3, done3ID, li3);
    }//GEN-LAST:event_loadActionPerformed
    
    /**
     * Move to the next page in the to do pagination using the changePage method
     */
    private void todoNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_todoNextActionPerformed
        changePage(todoIndex1, todoIndex2, todoIndex3, true, li);
    }//GEN-LAST:event_todoNextActionPerformed

    /**
     * Move to the previous page in the to do pagination using the changePage method
     */
    private void todoPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_todoPrevActionPerformed
        changePage(todoIndex1, todoIndex2, todoIndex3, false, li);
    }//GEN-LAST:event_todoPrevActionPerformed
    
    /**
     * Move to the next page in the doing pagination using the changePage method
     */
    private void doingNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doingNextActionPerformed
        changePage(doingIndex1, doingIndex2, doingIndex3, true, li2);
    }//GEN-LAST:event_doingNextActionPerformed

    /**
     * Move to the previous page in the doing pagination using the changePage method
     */
    private void doingPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doingPrevActionPerformed
        changePage(doingIndex1, doingIndex2, doingIndex3, false, li2);
    }//GEN-LAST:event_doingPrevActionPerformed

    /**
     * Move to the next page in the done pagination using the changePage method
     */
    private void doneNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneNextActionPerformed
        changePage(doneIndex1, doneIndex2, doneIndex3, true, li3);
    }//GEN-LAST:event_doneNextActionPerformed

    /**
     * Move to the previous page in the done pagination using the changePage method
     */
    private void donePrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_donePrevActionPerformed
        changePage(doneIndex1, doneIndex2, doneIndex3, false, li3);
    }//GEN-LAST:event_donePrevActionPerformed
    
    /*
     * Edit the lists
     * Code solely to edit the lists
     * Code to display the lists is above,
     * Code to save the lists is below
     */
    
    /**
     * Checks if a String can be an Integer
     * @param n the String to check
     * @return true if the String can be an Integer, false otherwise
     */
    private boolean isInteger(String n) {
        try {
            // Check - if it is an integer, do nothing so the return true below runs
            Integer.parseInt(n); 
        } catch (NumberFormatException e) { 
            // If it is not an integer, print an error and return false
            JOptionPane.showMessageDialog(null, "That's not a number!");
            return false;
        }
        // If the method doesn't return false, return true
        return true;
    }
    
    /**
     * Checks if an integer is between two integers (inclusive)
     * @param n the integer to check
     * @param start the lowest (minimum) integer
     * @param end the highest (maximum) integer
     */
    private boolean isWithinBounds(int n, int start, int end) {
        // If n is before the starting (minimum) number...
        if (n < start) {
            // ...then print an error and return false
            JOptionPane.showMessageDialog(null, "That's before the minimum number!");
            return false;
        }
        // If n is after the ending (maximum) number...
        if (n > end) {
            // ...then print an error and return false
            JOptionPane.showMessageDialog(null, "That's after the maximum number!");
            return false;
        }
        // If none of the other conditions are met, then n is in the range, so return true
        return true;
    }
    
    /**
     * Checks if a String is considered valid for the program
     * @param s the String to check
     * @return true if the String has less than or exactly 120 characters, has at least one non-space character, and isn't empty. False otherwise.
     */
    private boolean isValid(String s) {
        // If s is greater than 120 characters...
        if (s.length() > 120) {
            // ...then print an error message and return false
            JOptionPane.showMessageDialog(null, "That is too long! Maximum is 120 characters.");
            return false;
        }
        // If s is empty...
        if (s.equals("")) {
            // ...then set s to just a space so the next check fails
            s = " ";
        }
        // Loop through each character in s
        for (int i = 0; i < s.length(); i++) {
            // If there is a character that isn't a space...
            if (!s.substring(i, i + 1).equals(" ")) {
                // ...then return true because the entry is valid
                return true;
            }
        }
        // If the check above doesn't return true, then s is invalid,
        // so print an error and return false
        JOptionPane.showMessageDialog(null, "That is not a valid entry.");
        return false;
    }
    
    /**
     * Allows the user to select one of the list options with custom instructions
     * @param msg the instructions given to the user
     * @return the name of the list chosen, null if no list is chosen
     */
    private String chooseList(String msg) {
        // Possible options
        Object[] possibilities = {"To Do", "Doing", "Done"};
        // Prompt to get user input that uses the instruction message defined by the String msg
        String s = (String)JOptionPane.showInputDialog(
            null,
            msg,
            "Input",
            JOptionPane.PLAIN_MESSAGE,
            null,
            possibilities,
            " ");
        // If the user doesn't choose a list (clicks "cancel"), return null
        if (s == null) {
            return null;
        }
        // Otherwise return the list chosen
        return s;
    }
    
    /**
     * Allows the user to select one of the list options with default instructions
     * @return the name of the list chosen, null if no list is chosen
     */
    private String chooseList() {
        // Use the chooseList method with parameter String msg, just provide the following default instruction
        // Return what is returned using the chooseList method with parameter String msg
        return chooseList("Choose the list you want to edit.\n");
    }
    
    /**
     * Moves an item to a new position in any of the lists
     */
    private void moveItem() {
        // Prompt the user for the list the item they want to move is in
        String currentList = chooseList("Choose the list that has the item you want to move.\n");
        // Stop the method if the user doesn't choose a list
        if (currentList == null) {
            return;
        }
        // Prompt the user for the index of the item they want to move
        String indexToMove = JOptionPane.showInputDialog("What item ID do you want to move?\n");
        // Stop the method if the user doesn't choose an index
        if (indexToMove == null) {
            return;
        }
        // Stop the method if the user didn't input an integer
        if (!isInteger(indexToMove)) {
            return;
        }
        // Convert the String with the index to an int
        int indexToMoveInt = Integer.parseInt(indexToMove);
        // Minimum value the user can choose
        int min = 0;
        // Variable that will get replaced with the maximum value the user can choose
        int max = 0;
        // Set the max variable to the highest index in the list
        if (currentList.equals("To Do")) {
            max = li.getSize()-1;
        }
        if (currentList.equals("Doing")) {
            max = li2.getSize()-1;
        }
        if (currentList.equals("Done")) {
            max = li3.getSize()-1;
        }
        // If the index the user chose isn't within these bounds, stop the method
        if (!isWithinBounds(indexToMoveInt, min, max)) {
            return;
        }
        // Prompt the user for the list they want to move the item to
        String newList = chooseList("Choose the list you want to move that item to.\n");
        // Stop the method if they don't choose a list.
        if (newList == null) {
            return;
        }
        // Set the max and min for the next index selection
        // Reason we are doing this now is so we can display the max value in the instruction prompt
        // Set the minimum value the user can choose (still zero)
        min = 0;
        // Change the max variable to one plus the highest index
        // to account for adding the item to the end of the list
        max = 0;
        if (newList.equals("To Do")) {
            max = li.getSize();
        }
        if (newList.equals("Doing")) {
            max = li2.getSize();
        }
        if (newList.equals("Done")) {
            max = li3.getSize();
        }
        // Prompt the user for the index of the position they want to add the item to
        String indexToPlace = JOptionPane.showInputDialog("Choose the item ID of the slot you want to put the item.\n"
            + "Enter " + max + " to add the item to the end of the list.");
        // Stop the method if the user doesn't choose an index
        if (indexToPlace == null) {
            return;
        }
        // Stop the method if the user didn't input an integer
        if (!isInteger(indexToPlace)) {
            return;
        }
        // Convert the String with the index to an int
        int indexToPlaceInt = Integer.parseInt(indexToPlace);
        // If the list we are moving the item from is the same as the list we are moving the item to,
        // and the index chosen is the max case,
        // then subtract one from the index chosen
        // This is to prevent an error regarding using the MAX case to add an item to the end of a list,
        // as if the lists are the same, upon removing the original instance of the item from the list,
        // it will subtract the amount of available spots by one.
        if (currentList.equals(newList) && indexToPlaceInt == max) {
            indexToPlaceInt--;
        }
        // If the index the user chose isn't within these bounds, stop the method
        if (!isWithinBounds(indexToPlaceInt, min, max)) {
            return;
        }
        // Initialize a String to hold the content in the item to move
        String contentToMove = "";
        // Set the contentToMove String to the value of the item to move
        // and remove its original instance
        if (currentList.equals("To Do")) {
            contentToMove = li.getItem(indexToMoveInt);
            li.removeItem(indexToMoveInt);
        }
        if (currentList.equals("Doing")) {
            contentToMove = li2.getItem(indexToMoveInt);
            li2.removeItem(indexToMoveInt);
        }
        if (currentList.equals("Done")) {
            contentToMove = li3.getItem(indexToMoveInt);
            li3.removeItem(indexToMoveInt);
        }
        // Add a new item to the chosen list with the same value as the item that was to be moved
        if (newList.equals("To Do")) {
            li.addItem(indexToPlaceInt, contentToMove);
        }
        if (newList.equals("Doing")) {
            li2.addItem(indexToPlaceInt, contentToMove);
        }
        if (newList.equals("Done")) {
            li3.addItem(indexToPlaceInt, contentToMove);
        }
        // Load the new data
        load.doClick();
        // Save the lists
        saveLists();
        // Print a success message
        JOptionPane.showMessageDialog(null, "Successfully moved that item.");
    }
    
    /**
     * Edits an item in a list
     */
    private void editItem() {
        // Prompt the user for the list the item they want to edit is in
        String listToEdit = chooseList();
        // If the user doesn't choose a list, stop the method
        if (listToEdit == null) {
            return;
        }
        // Prompt the user for the index of the item they want to edit
        String indexToEdit = JOptionPane.showInputDialog("What item ID do you want to edit?\n");
        // If the user doesn't provide an index, stop the program
        if (indexToEdit == null) {
            return;
        }
        // If the index provided is not an integer, stop the program
        if (!isInteger(indexToEdit)) {
            return;
        }
        // Set the String representation of the index to an int
        int indexToEditInt = Integer.parseInt(indexToEdit);
        // Minimum value the user can choose
        int min = 0;
        // Initialize the maximum variable
        int max = 0;
        // Set the maximum variable to the highest index in the chosen list
        if (listToEdit.equals("To Do")) {
            max = li.getSize()-1;
        }
        if (listToEdit.equals("Doing")) {
            max = li2.getSize()-1;
        }
        if (listToEdit.equals("Done")) {
            max = li3.getSize()-1;
        }
        // Stop the method if the index chosen is not within these bounds
        if (!isWithinBounds(indexToEditInt, min, max)) {
            return;
        }
        // Initialize a variable to hold the value of the item to edit
        String itemToEditContent = "";
        // Set itemToEditContent to the value of the item the user wants to edit
        if (listToEdit.equals("To Do")) {
            itemToEditContent = li.getItem(indexToEditInt);
        }
        if (listToEdit.equals("Doing")) {
            itemToEditContent = li2.getItem(indexToEditInt);
        }
        if (listToEdit.equals("Done")) {
            itemToEditContent = li3.getItem(indexToEditInt);
        }
        // Prompt the user to make the changes they want and save this value
        String replaceWithThis = JOptionPane.showInputDialog(null, "Make your changes now.\n", itemToEditContent);
        // If the user doesn't do anything (presses "cancel"), stop the method
        if (replaceWithThis == null) {
            return;
        }
        // Replace the item to edit with its new value
        if (listToEdit.equals("To Do")) {
            li.replaceItem(indexToEditInt, replaceWithThis);
        }
        if (listToEdit.equals("Doing")) {
            li2.replaceItem(indexToEditInt, replaceWithThis);
        }
        if (listToEdit.equals("Done")) {
            li3.replaceItem(indexToEditInt, replaceWithThis);
        }
        // Load the new data
        load.doClick();
        // Save the lists
        saveLists();
        // Print the success message
        JOptionPane.showMessageDialog(null, "Successfully edited that item.");
    }
    
    /**
     * Adds an item to a list
     */
    private void addItem() {
        // Prompt the user for the list they want to add an item to
        String listToAddTo = chooseList();
        // If the user doesn't choose a list, stop the program
        if (listToAddTo == null) {
            return;
        }
        // Prompt the user for the content they want to add
        String itemToAdd = JOptionPane.showInputDialog("Write what you want to add to the list.\n");
        // If they don't put anything, stop the method
        if (itemToAdd == null) {
            return;
        }
        // If what they put isn't valid, stop the method
        if (!isValid(itemToAdd)) {
            return;
        }
        // Add an item with the content provided to the chosen list
        if (listToAddTo.equals("To Do")) {
            li.addItem(itemToAdd);
        }
        if (listToAddTo.equals("Doing")) {
            li2.addItem(itemToAdd);
        }
        if (listToAddTo.equals("Done")) {
            li3.addItem(itemToAdd);
        }
        // Load the new data
        load.doClick();
        // Save the lists
        saveLists();
        // Print success message
        JOptionPane.showMessageDialog(null, "Successfully added that item.");
    }
    
    private void removeItem() {
        String listToRemoveFrom = chooseList();
        if (listToRemoveFrom == null) {
            return;
        }
        String indexToRemove = JOptionPane.showInputDialog("What item ID do you want to delete?\n");
        if (indexToRemove == null) {
            return;
        }
        if (!isInteger(indexToRemove)) {
            return;
        }
        int indexToRemoveInt = Integer.parseInt(indexToRemove);
        int min = 0;
        int max = 0;
        if (listToRemoveFrom.equals("To Do")) {
            max = li.getSize()-1;
        }
        if (listToRemoveFrom.equals("Doing")) {
            max = li2.getSize()-1;
        }
        if (listToRemoveFrom.equals("Done")) {
            max = li3.getSize()-1;
        }
        if (!isWithinBounds(indexToRemoveInt, min, max)) {
            return;
        }
        if (listToRemoveFrom.equals("To Do")) {
            li.removeItem(indexToRemoveInt);
        }
        if (listToRemoveFrom.equals("Doing")) {
            li2.removeItem(indexToRemoveInt);
        }
        if (listToRemoveFrom.equals("Done")) {
            li3.removeItem(indexToRemoveInt);
        }
        load.doClick();
        saveLists();
        JOptionPane.showMessageDialog(null, "Successfully deleted that item.");
    }
    
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        addItem();
    }//GEN-LAST:event_addActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        editItem();
    }//GEN-LAST:event_editActionPerformed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        removeItem();
    }//GEN-LAST:event_removeActionPerformed

    private void moveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveActionPerformed
        moveItem();
    }//GEN-LAST:event_moveActionPerformed
    
    /*
     * Save the lists
     * Code solely to save the lists
     * Code to save the lists is above,
     * Code to edit the lists is above
     */
    
    private void saveLists() {
        try {
            // Gets the ArrayList as a String representation
            String s1 = (li.toString());
            String s2 = (li2.toString());
            String s3 = (li3.toString());
            // Open the file
            PrintWriter file1 = new PrintWriter(new FileWriter(li.getLocation()));
            PrintWriter file2 = new PrintWriter(new FileWriter(li2.getLocation()));
            PrintWriter file3 = new PrintWriter(new FileWriter(li3.getLocation()));
            // Replace the contents of the file with the String representation of the ArrayList
            file1.println(s1);
            file2.println(s2);
            file3.println(s3);
            // Close the file
            file1.close();
            file2.close();
            file3.close();
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(null, "Something went wrong: couldn't save data.");
        }
    }
    
    private static final List li = new List("lists/ToDoList.txt");
    private static final List li2 = new List("lists/DoingList.txt");
    private static final List li3 = new List("lists/DoneList.txt");
    
    private static final SoftPlanner sp = new SoftPlanner();
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SoftPlanner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SoftPlanner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SoftPlanner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SoftPlanner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SoftPlanner().setVisible(true);
            }
        });
        
        // Run on program start
        System.out.println(li.getLocation());
        loadFile(li);
        loadFile(li2);
        loadFile(li3);
        sp.load.doClick();
    }
    
    public static void loadFile(List list) {
        list.clearList();
        // Try reading the file
        try {
            // Get the file
            BufferedReader readFile = new BufferedReader(new FileReader(list.getLocation()));
            // Create an empty String to hold the contents of the current line
            String currentLine;
            // Loop through each line in the text file until there are none left
            while ((currentLine = readFile.readLine()) != null) {
                // If the line has no contents in it, break from the loop
                // as there is said to be no more items left. This is to
                // account for random empty lines at the end of the text file,
                // which when manually editing it, can accidentally be left in.
                if (currentLine.equals("")) {
                    break;
                }
                // Add the contents of this line to a new element of the ArrayList
                list.addItem(currentLine);
                System.out.println(list.getItem(0));
                //System.out.println(currentLine);
            }
            System.out.println("");
            // Close the file now that we are done with it
            readFile.close();
        } catch (IOException ioe) {
            // If something goes wrong, print this
            JOptionPane.showMessageDialog(null, "Something went wrong: couldn't load data.");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JLabel doing1ID;
    private javax.swing.JTextArea doing1Title;
    private javax.swing.JLabel doing2ID;
    private javax.swing.JTextArea doing2Title;
    private javax.swing.JLabel doing3ID;
    private javax.swing.JTextArea doing3Title;
    private javax.swing.JLabel doingLabel;
    private javax.swing.JButton doingNext;
    private javax.swing.JButton doingPrev;
    private javax.swing.JLabel done1ID;
    private javax.swing.JTextArea done1Title;
    private javax.swing.JLabel done2ID;
    private javax.swing.JTextArea done2Title;
    private javax.swing.JLabel done3ID;
    private javax.swing.JTextArea done3Title;
    private javax.swing.JLabel doneLabel;
    private javax.swing.JButton doneNext;
    private javax.swing.JButton donePrev;
    private javax.swing.JButton edit;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JButton load;
    private javax.swing.JButton move;
    private javax.swing.JButton remove;
    private javax.swing.JLabel todo1ID;
    private javax.swing.JTextArea todo1Title;
    private javax.swing.JLabel todo2ID;
    private javax.swing.JTextArea todo2Title;
    private javax.swing.JLabel todo3ID;
    private javax.swing.JTextArea todo3Title;
    private javax.swing.JLabel todoLabel;
    private javax.swing.JButton todoNext;
    private javax.swing.JButton todoPrev;
    // End of variables declaration//GEN-END:variables
}
